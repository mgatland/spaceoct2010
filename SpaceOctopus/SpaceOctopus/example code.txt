foo
        /// <summary>
        /// Draw the grass, hills, mountains, and sun/moon. Handle transitioning
        /// between day and night as well.
        /// </summary>
        /// <param name="elapsedTime">The elapsed time since last Draw</param>
        private void DrawBackground(float elapsedTime)
        {
            transitionFactor += transitionRate * elapsedTime;
            if (transitionFactor < 0.0f)
            {
                transitionFactor = 0.0f;
                transitionRate = 0.0f;
            }
            if (transitionFactor > 1.0f)
            {
                transitionFactor = 1.0f;
                transitionRate = 0.0f;
            }

            Vector3 day = Color.White.ToVector3();
            Vector3 night = new Color(80, 80, 180).ToVector3();
            Vector3 dayClear = Color.CornflowerBlue.ToVector3();
            Vector3 nightClear = night;

            Color clear = new Color(Vector3.Lerp(dayClear, nightClear, transitionFactor));
            Color tint = new Color(Vector3.Lerp(day, night, transitionFactor));

            // Clear the background, using the day/night color
            ScreenManager.Game.GraphicsDevice.Clear(clear);

            // Draw the mountains
            ScreenManager.SpriteBatch.Draw(mountainsTexture, new Vector2(0, screenHeight - mountainsTexture.Height), tint);

            // Draw the hills
            ScreenManager.SpriteBatch.Draw(hillsTexture, new Vector2(0, screenHeight - hillsTexture.Height), tint);

            // Draw the ground
            ScreenManager.SpriteBatch.Draw(groundTexture, new Vector2(0, screenHeight - groundTexture.Height), tint);

            // Draw the sun or moon (based on time)
            ScreenManager.SpriteBatch.Draw(sunTexture, sunPosition, new Color(255, 255, 255, (byte)(255.0f * (1.0f - transitionFactor))));
            ScreenManager.SpriteBatch.Draw(moonTexture, sunPosition, new Color(255, 255, 255, (byte)(255.0f * transitionFactor)));
        }







		       /// <summary>
        /// Draw the hud, which consists of the score elements and the GAME OVER tag.
        /// </summary>
        void DrawHud()
        {
            float scale = 2.0f;

            if (gameOver)
            {
                Vector2 size = menuFont.MeasureString("GAME OVER");
                DrawString(menuFont, "GAME OVER", new Vector2(ScreenManager.Game.GraphicsDevice.Viewport.Width / 2 - size.X, ScreenManager.Game.GraphicsDevice.Viewport.Height / 2 - size.Y / 2), new Color(255, 64, 64), scale);

            }
            else
            {
                string bonusString = (100 > 0 ? " (" + 100.ToString(System.Globalization.CultureInfo.CurrentCulture) + "%)" : "");
                // Score
                //  DrawString(scoreFont, "SCORE: " + player.Score.ToString(System.Globalization.CultureInfo.CurrentCulture) + bonusString, new Vector2(leftOffset, topOffset), Color.Yellow, scale);

                // string text = "LIVES: " + player.Lives.ToString(System.Globalization.CultureInfo.CurrentCulture);
                // Vector2 size = scoreFont.MeasureString(text);
                // size *= scale;

                // Lives
                // DrawString(scoreFont, text, new Vector2(screenWidth - leftOffset - (int)size.X, topOffset), Color.Yellow, scale);

                DrawString(scoreFont, "LEVEL: " + (5).ToString(System.Globalization.CultureInfo.CurrentCulture), new Vector2(leftOffset, screenHeight - bottomOffset), Color.Yellow, scale);

                String text = "HIGH SCORE: " + 5.ToString(System.Globalization.CultureInfo
           .CurrentCulture);

                Vector2 size = scoreFont.MeasureString(text);

                DrawString(scoreFont, text, new Vector2(screenWidth - leftOffset - (int)size.X * 2, screenHeight - bottomOffset), Color.Yellow, scale);
            }
        }

        /// <summary>
        /// A simple helper to draw shadowed text.
        /// </summary>
        void DrawString(SpriteFont font, string text,
        Vector2 position, Color color)
        {
            ScreenManager.SpriteBatch.DrawString(font, text, new Vector2(position.X + 1, position.Y + 1), Color.Black);
            ScreenManager.SpriteBatch.DrawString(font, text, position, color);
        }

        /// <summary>
        /// A simple helper to draw shadowed text.
        /// </summary>
        void DrawString(SpriteFont font, string text,
        Vector2 position, Color color, float fontScale)
        {
            ScreenManager.SpriteBatch.DrawString(font, text, new Vector2(position.X + 1, position.Y + 1), Color.Black, 0, new Vector2(0, font.LineSpacing / 2), fontScale, SpriteEffects.None, 0);
            ScreenManager.SpriteBatch.DrawString(font, text, position, color, 0, new Vector2(0, font.LineSpacing / 2), fontScale, SpriteEffects.None, 0);
        }




vector2.Normalize(destination - start) gives you a direction vector, way cool!




        /// <summary>
        /// Returns an instance of a usable alien instance. Prefers reusing an existing (dead)
        /// alien over creating a new instance.
        /// </summary>
        /// <returns>An alien ready to place into the world.</returns>
        Alien CreateAlien()
        {
            Alien b = null;

            for (int i = 0; i < aliens.Count; ++i)
            {
                if (aliens[i].IsAlive == false)
                {
                    b = aliens[i];
                    break;
                }
            }

            if (b == null)
            {
                b = new Alien();
                aliens.Add(b);
            }

            b.IsAlive = true;

            return b;
        }